head(cars)
scatter.smooth(x=cars$speed, y=cars$dist, main="Dist ~ Speed")
par(mfrow=c(1, 2))  # divide graph area in 2 columns
boxplot(cars$speed, main="Speed", sub=paste("Outlier rows: ", boxplot.stats(cars$speed)$out))  # box plot for 'speed'
boxplot(cars#dist, main = "Distance", sub=paste("Outlier rows: ", boxplot.stats(cars$dist)$out))
boxplot(cars$dist, main="Distance", sub=paste("Outlier rows: ", boxplot.stats(cars$dist)$out))  # box plot for 'distance'
boxplot(cars$dist, main="Distance", sub=paste("Outlier rows: ", boxplot.stats(cars$dist)$out))  # box plot for 'distance'
boxplot(cars$dist, main="Distance", sub=paste("Outlier rows: ", boxplot.stats(cars$dist)$out))
boxplot(cars$speed, main="Speed", sub=paste("nothing: ", boxplot.stats(cars$speed)$out))  # box plot for 'speed'
boxplot(cars$speed, main="Speed", boxplot.stats(cars$speed)$out)
boxplot(cars$dist, boxplot.stats(cars$speed)$out)
boxplot(cars$dist, boxplot.stats(cars$speed))
boxplot(cars$dist, boxplot.stats(cars$speed$out))
boxplot(cars$dist, boxplot.stats(cars$speed)$out)
boxplot(cars$dist, main="distance" boxplot.stats(cars$speed)$out)
boxplot(cars$dist, main="distance", boxplot.stats(cars$speed)$out)
boxplot(cars$speed, main="speed" boxplot.stats(cars$distance)$out)
boxplot(cars$dist, main="Distance" boxplot.stats(cars$distance)$out)
boxplot(cars$dist, main="distance", boxplot.stats(cars$speed)$out)
boxplot(cars$dist, main="distance" boxplot.stats(cars$speed)$out)
boxplot(cars$dist, main="Distance", boxplot.stats(cars$dist)$out)
boxplot(cars$speed, main="Speed" boxplot.stats(cars$speed)$out)
boxplot(cars$speed, main="Speed", boxplot.stats(cars$speed)$out)
boxplot(cars$speed, main="Distance", sub=paste("Outlier rows: ", boxplot.stats(cars$dist)$out))  # box plot for 'distance'
boxplot(cars$speed)
boxplot(cars$speed, main = "Speed",boxplot.stats(cars$speed)$out)
boxplot(cars$speed, main = "Speed", sub=past("Outliers: ", boxplot.stats(cars$speed)$out)
boxplot(cars$speed, main = "Speed", sub=paste("Outliers: ", boxplot.stats(cars$speed)$out)
boxplot(cars$speed, main = "Speed", sub=paste("Outliers: ", boxplot.stats(cars$speed)$out))
boxplot(cars$dist, main="Distance", sub=paste("Outlier rows: ", boxplot.stats(cars$dist)$out))  # box plot for 'distance'
boxplot(cars$dist, main="Distance", sub=paste("Stats: ", boxplot.stats(cars$dist)$stats))  # box plot for 'distance'
boxplot(cars$dist, main="Distance", sub=paste("Outlier rows: ", boxplot.stats(cars$dist)$stats))  # box plot for 'distance'
boxplot(cars$dist, main="Distance", sub=paste(boxplot.stats(cars$dist)$stats))  # box plot for 'distance'
boxplot(cars$dist, main="Distance", sub=paste("Outlier rows: ", boxplot.stats(cars$dist)$conf))  # box plot for 'distance'
library(e1071)
par(mfrow=c(1, 2))  # divide graph area in 2 columns
plot(density(cars$speed), main="Density Plot: Speed", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(cars$speed), 2)))  # density plot for 'speed'
polygon(density(cars$speed), col="red")
plot(density(cars$dist), main="Density Plot: Distance", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(cars$dist), 2)))  # density plot for 'dist'
polygon(density(cars$dist), col="red")
plot(density(cars$speed))
cor(cars$speed, cars$dist)
cor(cars$dist, cars$speed)
scatter(x=cars$speed, y=cars$dist)
scatter.smooth(x=cars$speed,y=cars$dist)
linearMod <- lm(dist~speed, data=cars)
View(linearMod)
print(linearMod)
summary(linearMod)
head(cars)
scatter.smooth(x=cars$speed, y=cars$dist, main="Speed vs Distance")
scatter.smooth(x=speed, y=dist, main="Speed vs Distance")
scatter.smooth(x=cars$speed, y=cars$dist, xkabel="Speed", ylabel="Distance", main="Speed vs Distance")
scatter.smooth(x=cars$speed, y=cars$dist, xlabel="Speed", ylabel="Distance", main="Speed vs Distance")
par(mfrow=c(2, 2))
par(mfrow=c(1,2))
par(mfrow=c(2,3))
boxplot.stats(cars$speed, main="Speed")
boxplot(cars$speed, main="Speed")
boxplot(cars$dist, main="Distance")
plot(density(cars$speed), main="Speed Density")
plot(1,2)
plot(1,2,3)
plot.function(x=cars$speed, y=cars$dist)
plot.function(x=speed~dist)
par(mfrow=c(1,2))
boxplot(cars$speed, main="Speed")boxplot(cars$dist, main="Distance")
boxplot(cars$speed, main="Speed")
> boxplot(cars$dist, main="Distance")
boxplot(cars$speed, main="Speed")boxplot(cars$dist, main="Distance")
boxplot(cars$speed, main="Speed")
cor(cars$speed, cars$dist)
linearMod = lm(dist~speed, data=cars)
print(linearMod)
summary(linearMod)
plot(x,sin(x))
x = seq(-20,20,.5)
plot(x,3x-2)
plot(x,sin(x))
plot(3x-2)
plot((3x-2))
plot(y=3x-2)
y=3x-2
x = seq(-pi,pi,.1)
plot(x,sin(x))
plot(x,x)
x = seq(-20,20,.5)
plot(x,2x)
plot(x,(2x))
plot(x,2*x)
plot(x,3*x-2)
x= seq(-5,5,1)
plot(x,3*x-2)
rankings <- read.csv("/Users/davidzhang/Desktop/Python/Tennis/rankings.csv", header=TRUE, skipNul=TRUE)
attach(rankings)
View(rankings)
names(rankings)
model1 <- lm(Points ~ Points.Tourn)
model2 <- lm(Points ~ Points.Tourn/Age)
print(model1)
print(model2)
summary(model1)
summary(model2)
anova(model1,model2)
library(help = "datasets")
data(nile)
data*cars()
data(cars)
force(cars)
newHaven <- data(nhtemp)
force(nhtemp)
data(Nile)
force(Nile)
dim(Nile)
head(Nile)
data(BostonHousing)
data(iris)
dim(iris)
head(iris)
data(iris)
force(iris)
data(Nile)
data(dim)
data(head)
dim(Nile)
head(Nile)
head(iris)
head(women)
data(women)
force(women)
attach(women)
weightmodel <- lm(weight ~ height)
View(weightmodel)
print(weightmodel)
summary(weightmodel)
plot(height, weight)
cor(weightmodel)
cor(height, weight)
abline(height ~ weight, col='blue')
abline(height ~ weight, col='blue')
abline(height ~ weight, col='red')
abline(height ~ weight)
abline(weightmodel)
library(help ='datasets')
attach(sleep)
names(sleep)
data(sleep)
force(sleep)
data(swiss)
force(swiss)
data(attitude)
force(attitude)
summary(attitude)
summary(women)
summary(rankings)
attach(attitudes)
attach(attitude)
$complaints <- lm(rating ~ complaints)
mod1 <- lm(ratings ~ complaints)
mod1 <- lm(rating ~ complaints)
mod2 <- lm(rating ~ privileges)
mod3 <- lm(rating ~ learning)
mod4 <- lm(rating ~ raises)
mod5 <- lm(rating ~ critical)
mod6 <- lm(rating ~ advance)
cor(mod1)
cor(ratings, complaints)
cor(rating, complaints)
cor(rating, privileges)
cor(ratings, learning)
cor(rating, learning)
cor(rating, raises)
cor(rating, critical)
cor(rating, advance)
plot(complaints, rating)
abline(mod1)
plot(privileges, rating)
abline(mod2)
plot(learning, rating)
2mod <- lm(rating ~ complaints + privileges)
mod12 <- lm(rating ~ complaints + privileges)
mod123 <- lm(rating ~ complaints + privileges + learning)
mod1234 <- lm(rating ~ complaints + privileges + learning + raises)
anova(mod1, mod12)
anova(mod12, mod123)
anova(mod123, mod1234)
mod12345 <- lm(rating ~ learning + critical + raises + complaints + privileges)
mod123456 <- lm(rating ~ learning + critical + raises + complaints + privileges + advance)
anova(mod12345, mod123456)
anova(mod1234, mod12345)
data(precip)
force(precip)
data(freeny)
force(freeny)
force(freeny.x)
force(freeny.y)
data(swiss)
force(swiss)
library(leaps)
models <- regsubsets(rating~., data=attitude, nvmax = 4)
install.packages("leaps")
library(leaps)
models <- regsubsets(rating~., data=attitude, nvmax = 4)
summary(models)
View(models)
models_sum <- summary(models)
attach(models_sum)
View(outmat)
View(which)
data.frame(
Adj.R2 = which.max(adjr2),
CP = which.min(cp),
BIC = which.min(bic)
)
View(outmat)
data(attitudes)
data(attitude)
force(attitude)
model <- lm(rating ~ complaints)
attach(attitude)
model <- lm(rating ~ complaints)
print(model)
summary(model)
p2model_summary = summary(p2model)
colnames(p2d) = c("y","x1","x2","x1x1","x2x2","x1x2")
p2d = as.data.frame(p2d)
p2model = lm(y ~ x1+x2+x1x1+x2x2+x1x2, p2d)
p2model_summary = summary(p2model)
x <- c(-1,-1,1,1)
y <- c(-1,1,-1,1)
percent <- c(39.3, 40, 40.9, 41.5)
lm <- (percent ~ x + y)
model <- lm(percent ~ x+y)
print(model)
summary(model)
center_points <- c(40.3, 40.5, 40.7, 40.2, 40.6)
avg(center_points)
mean(center_points)
40.46+40.425
/3
80.885/2
x <- c(-1,-1,1,1,0,0,0,0,0)
y <- c(-1,1,-1,1,0,0,0,0,0)
value <- c(39.3,40,40.9,41.5,40.3,40.5,40.7,40.2,40.6)
model <- lm(value ~ x + y)
summary(model)
setwd('/Users/davidzhang/Desktop/COVID-19/cleaned_data/daily/georgia')
data = read.csv('(georgia)_03-22-2020.csv', header = FALSE)
new = data[1]
View(new)
new = data[1,5]
new = data[2]
View(new)
new_state = data[2]
new_state = data[1]
new_mr = data[4]
View(new_mr)
View(new_state)
new_mr = data[4,1]
print(new_mr)
print(new_mr)
assigned = FALSE
#look closer at mortality rates
for(file in files) {
if (!assigned) {
data = read.csv(file, header = FALSE)
temp1 = data[1]
temp2 = data[4]
data = append(temp1, temp2)
assigned = TRUE
} else {
values = read.csv(file, header = FALSE)
temp1 = values[1]
temp2 = values[4]
append(data, append(temp1,temp2))
}
}
setwd('/Users/davidzhang/Desktop/COVID-19/cleaned_data/daily/georgia')
files = list.files(path = '.')
assigned = FALSE
#look closer at mortality rates
for(file in files) {
if (!assigned) {
data = read.csv(file, header = FALSE)
temp1 = data[1]
temp2 = data[4]
data = append(temp1, temp2)
assigned = TRUE
} else {
values = read.csv(file, header = FALSE)
temp1 = values[1]
temp2 = values[4]
append(data, append(temp1,temp2))
}
}
View(data)
print(length(data))
test = [1,2,3]
test = (1,2,3)
test = c(1,2,3)
typeof(test)
